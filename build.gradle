plugins {
    id 'java-library'
    id 'com.github.spotbugs' version '6.0.19'
}



spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = false
    reportLevel = com.github.spotbugs.snom.Confidence.HIGH
    effort = 'less'
    visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
    omitVisitors = [ 'FindNonShortCircuit' ]
    reportsDir = file("$buildDir/reports/spotbugs")
    includeFilter = file('spotbugs-include.xml')
    excludeFilter = file('spotbugs-exclude.xml')
    onlyAnalyze = ['com.foobar.MyClass', 'com.foobar.mypkg.*']
    projectName = name
    release = version
    extraArgs = [ '-nested:false' ]
    jvmArgs = [ '-Duser.language=ja' ]
    maxHeapSize = '512m'
}

spotbugsMain {
    reports {
        html.required.set(true)
        xml.required.set(false)
    }
}

// Ensure source sets are correctly configured
sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
    }
}

apply from: "scripts/build-quality.gradle"
apply from: "scripts/release-commons.gradle"
apply from: "scripts/signing.gradle"
apply from: "scripts/jacoco.gradle"

project.ext.limits = [
        'instruction': 70,
        'branch'     : 53,
        'line'       : 75,
        'complexity' : 60,
        'method'     : 65,
        'class'      : 87
]

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    gradlePluginPortal()
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.1'
    testImplementation 'com.codeborne:selenide:6.17.2'
    testImplementation 'io.github.bonigarcia:webdrivermanager:5.7.0'
    implementation 'ch.qos.logback:logback-classic:1.2.6'
    api 'com.epam.reportportal:client-java:5.2.14'
    compileOnly "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    implementation 'org.slf4j:slf4j-api:2.0.7'
    testImplementation 'com.epam.reportportal:agent-java-test-utils:0.0.3'
    testImplementation "org.junit.platform:junit-platform-runner:${junit_runner_version}" // We need runner for JUnit 4 compatibility tests
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit_version}" // Required for tests to run
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_version}"
    testImplementation 'org.aspectj:aspectjweaver:1.9.19'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'ch.qos.logback:logback-classic:1.3.12'
    testImplementation 'com.epam.reportportal:logger-java-logback:5.2.2'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'com.squareup.okhttp3:okhttp:4.12.0'
}

test {
    outputs.upToDateWhen { return false }
    useJUnitPlatform()

    systemProperty 'selenide.headless', System.getProperty('selenide.headless')
    systemProperty 'chromeoptions.prefs', System.getProperty('chromeoptions.prefs', "profile.password_manager_leak_detection=false")

    exclude("com/epam/reportportal/junit5/features/**")
    maxParallelForks(5) // it's forks - separate JVMs, should not interfere each other
    forkEvery(1)
    doFirst {
        def weaver = configurations.testRuntimeClasspath.find { it.name.contains("aspectjweaver") }
        jvmArgs += "-javaagent:$weaver"
    }
    environment "AGENT_NO_ANALYTICS", "1"
    testLogging {
        events "failed"
        exceptionFormat "full"
    }

    wrapper {
        gradleVersion = '5.4.1'
    }

    processResources {
        filesMatching('agent.properties') {
            expand(project.properties)
        }
    }

    build.dependsOn jacocoTestReport
}